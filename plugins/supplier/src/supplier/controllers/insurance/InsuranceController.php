<?php
/**
 * Created by PhpStorm.
 * User: yunzhong
 * Date: 2019/4/3
 * Time: 16:30
 */

namespace Yunshop\Supplier\supplier\controllers\insurance;

use app\common\components\BaseController;
use app\common\exceptions\AppException;
use app\common\facades\Setting;
use app\common\services\Session;
use EasyWeChat\ShakeAround\Page;
use Yunshop\Supplier\common\models\Insurance;
use app\common\exceptions\ShopException;
use app\common\helpers\Url;
use app\common\helpers\PaginationHelper;
use Yunshop\Supplier\common\models\InsuranceCompany;
use Yunshop\Supplier\common\models\InsurancePdf;
use Yunshop\Supplier\common\models\Supplier;
use Yunshop\Supplier\common\services\InsuranceService;
use app\common\models\Address;
use app\common\models\Street;



class InsuranceController extends BaseController
{

    public $insuranceModel;



    public function preAction()
    {
        parent::preAction(); // TODO: Change the autogenerated stub
        $params = \YunShop::request()->get('search');
        if (!Session::get('supplier')['id']) {
            throw new ShopException('供应商身份验证失败');
        }
        $params['supplier_id'] = Session::get('supplier')['id'];
        if ($params) {
            $params = array_filter($params, function ($item) {
                return !empty($item);
            });
        }

        $this->insuranceModel = Insurance::queryData($params);
    }

    public function index()
    {
        $supplier_id = Session::get('supplier')['id'];
        $supplier = Supplier::find($supplier_id);
        if (empty($supplier)) {
            throw new ShopException('找不到供应商');
        }
        if (!empty($supplier) && $supplier->insurance_status != 1) {
            throw new ShopException('保单功能已关闭，请联系后台开启');
        }

        $set = Setting::get('plugin.supplier');
        $is_company = $set['ins_company_status'];
        $params = \YunShop::request()->get('search');

        $list = $this->insuranceModel->orderBy('id', 'desc')->paginate(10)->toArray();
        $list['data'] = InsuranceService::addressTranslation($list['data']);
        $pager = PaginationHelper::show($list['total'], $list['current_page'], $list['per_page']);

        return view('Yunshop\Supplier::supplier.insurance.insurance_list',[
            'data' => $list['data'],
            'pager' => $pager,
            'search' => $params,
            'is_company' => $is_company,
            'phone1' => $set['ins_phone_1'],
            'phone2' => $set['ins_phone_2'],
        ]);
    }

    /***
     * 存储保单修改数据
     */
    public function insuranceEdit()
    {
        $is_company = Setting::get('plugin.supplier.ins_company_status');
        $id = \Yunshop::request()->id;
        $data = \Yunshop::request()->data;
        $insurance_model = Insurance::find($id);

        if ($data){
            $insurance_model->setRawAttributes($data);
            $validator = $insurance_model->validator($insurance_model->getAttributes());

            if ($validator->fails()) {
                $this->error($validator->messages());
            } else {
                if ($insurance_model->save()) {
                    //显示信息并跳转
                    return $this->message('修改成功',Url::absoluteWeb('plugin.supplier.supplier.controllers.insurance.insurance.index'));
                } else {
                    return $this->error('修改失败');
                }
            }
        }

        $company = $list = InsuranceCompany::uniacid()
            ->orderBy('sort', 'desc')
            ->orderBy('id', 'desc')
            ->get()
            ->toArray();

        return view('Yunshop\Supplier::supplier.insurance.insurance_edit',[
            'data' => $insurance_model,
            'is_company' => $is_company,
            'company_list' => $company,
        ]);
    }

    /***
     * 存储保单添加数据
     */
    public function insuranceAdd()
    {
        $is_company = Setting::get('plugin.supplier.ins_company_status');
        $data = \Yunshop::request()->data;

        if ($data){
            $data['supplier_id'] = Session::get('supplier')['id'];
            $data['uniacid'] = \Yunshop::app()->uniacid;
            $insurance = new Insurance();

            $insurance->setRawAttributes($data);
            $validator = $insurance->validator($insurance->getAttributes());
            if ($validator->fails()) {
                //检测失败
                $this->error($validator->messages());
            } else {
                //数据保存
                if ($insurance->save()) {
                    return $this->message('添加成功',Url::absoluteWeb('plugin.supplier.supplier.controllers.insurance.insurance.index'));
                }
            }
        }

        $company = $list = InsuranceCompany::uniacid()
            ->orderBy('sort', 'desc')
            ->orderBy('id', 'desc')
            ->get()
            ->toArray();

        return view('Yunshop\Supplier::supplier.insurance.insurance_edit', [
            'is_company' => $is_company,
            'company_list' => $company,
        ])->render();
    }

    /**
     * 删除保单
     */
    public function insuranceDel()
    {
        $id = intval(\Yunshop::request()->id);
        $insurance_model = Insurance::find($id);
        if (!$insurance_model) {
            return $this->message('无记录或已被删除', '', 'error');
        }


        if ($insurance_model->delete()) {
            return $this->message('删除成功');
        }
        return $this->message('删除失败', '', 'error');
    }


    /**
     * 导出表格
     */
    public function exportExample()
    {
        $params = \YunShop::request()->get('search');
        isset($params['supplier_id']) && empty($params['supplier_id']) && $params['supplier_id'] = Session::get('supplier')['id'];
        $export_data[0] = ['序号','供应商账号','店面名称','被保险人','证件号码','被保险人联系方式','保险详细地址'
            ,'投保财产(需如实填写)','用户类型','保额 （万元）','保险期限 (年)','保费（元）','投保险种（1、火险+盗抢。   2、单独盗抢）','附加玻璃险（35元保1万）份','投保人（安防公司）','保险公司','创建时间','备注'];
        $child = InsuranceService::addressTranslation(Insurance::queryData($params)->get());
        foreach ($child as $key => $item) {
            $insurance = $item;
            $export_data[$key + 1] = [
                $insurance->serial_number,
                $insurance->supplier->username,
                $insurance->shop_name,
                $insurance->insured,
                ' '.$insurance->identification_number,
                $insurance->phone,
                $insurance->address,
                $insurance->insured_property,
                $insurance->customer_type,
                $insurance->insured_amount,
                $insurance->guarantee_period,
                $insurance->premium,
                $insurance->insurance_coverage,
                $insurance->additional_glass_risk,
                $insurance->insurance_company,
                $insurance->hasOneCompany->name,
                $insurance->created_at,
                $insurance->note,
            ];
        }
        \Excel::create('保单数据模板', function ($excel) use ($export_data) {
            $excel->setTitle('Office 2005 XLSX Document');
            $excel->setCreator('芸众商城')
                ->setLastModifiedBy("芸众商城")
                ->setSubject("Office 2005 XLSX Test Document")
                ->setDescription("Test document for Office 2005 XLSX, generated using PHP classes.")
                ->setKeywords("office 2005 openxml php")
                ->setCategory("report file");
            $excel->sheet('info', function ($sheet) use ($export_data) {
                $sheet->rows($export_data);
                ob_end_clean();
            });
        })->export('xls');
    }

    /**
     * @name 获取示例excel
     * @author
     */
    public function getExample()
    {
        $export_data[0] = ['序号','店面名称','被保险人（营业执照公司名称或法人姓名）','证件号码（营业执照信用代码、法人身份证号码）','被保险人联系方式','保险地址                              请写明：**省**市**区/县**乡/镇**路**号，如果有楼层的还要写明：**楼**室'
            ,'投保财产(需如实填写,尽可能全面)','用户类型（店铺、仓库、工厂、金店）','保额 （万元）','保险期限 (年)','保费（元）','投保险种（1、火险+盗抢。   2、单独盗抢）','附加玻璃险（35元保1万）份','投保人（安防公司）','保险公司','备注'];


        $export_data[1] = ['1','XXX生活超市','刘XX','13098219900624XXXX','13924042007','河北省任丘市建设西路金台园南门对面','烟酒副食品日用百货水果蔬菜 五金 及经营设备','商铺',
            '20','1','160','火险+盗抢','2','河北XXX安防科技有限公司', '平安银行','填写备注内容'];



        \Excel::create('保单数据模板', function ($excel) use ($export_data) {
            $excel->setTitle('Office 2005 XLSX Document');
            $excel->setCreator('芸众商城')
                ->setLastModifiedBy("芸众商城")
                ->setSubject("Office 2005 XLSX Test Document")
                ->setDescription("Test document for Office 2005 XLSX, generated using PHP classes.")
                ->setKeywords("office 2005 openxml php")
                ->setCategory("report file");
            $excel->sheet('info', function ($sheet) use ($export_data) {
                $sheet->rows($export_data);
                ob_end_clean();
                $sheet->setWidth(array( 'A' => 8,'B' => 10,'C' => 10, 'D'=> 16,'E'=>11,'F'=>21,'G'=> 20,'H'=> 11,'I'=> 6,'J'=>8 ,'K'=>8 ,'L'=>12 ,'M'=>9 ,'N'=>30 ,'O'=> 10));//, 'P'=>21 ,'R'=> 10

                $sheet->cells('A1:O1', function($cells) {
                    $cells->setValignment('center');//字体垂直居中
                    $cells->setAlignment('center');//字体水平居中
                    $cells->setBackground('#c0c0c0');
                    $cells->setFontWeight('bold');
                    $cells->setBorder('solid', '1px', '1px', 'solid');
                });

                $sheet->getStyle('A1:O1')->getAlignment()->setWrapText(true);//单元格换行

                $style_array = array(
                    'borders' => array(
                        'allborders' => array(
                            'style' => \PHPExcel_Style_Border::BORDER_THIN,
                        )
                    )
                );
                $sheet->getStyle('A1:O1')->applyFromArray($style_array);
            });
        })->export('xls');
    }



    public static function tplLinkedAddress($names, $data)
    {
        $html = "";
        //省
        $html .= '<select id="sel-provance" name="' . $names[0] . '" onchange="selectCity();" class="select">';
        $html .= '<option value="">请选择省份</option>';
        $html .= '</select>';
        //市
        $html .= '<select id="sel-city" name="' . $names[1] . '" onchange="selectcounty();" class="select">';
        $html .= '<option value="" >请选择城市</option>';
        $html .= '</select>';
        //区
        if(isset($names[3])){
            $html .= '<select id="sel-area" name="' . $names[2] . '" onchange="selectstreet();" class="select">';
        }else{
            //$html .= '<select id="sel-provance" name="' . $names[2] . '" class="select">';
            $html .= '<select id="sel-area" name="' . $names[2] . '" class="select">';
        }
        $html .= '<option value="" >请选择区</option>';
        $html .= '</select>';
        //街道
        if (isset($names[3])) {
            $html .= '<select id="sel-street" name="' . $names[3] . '"  class="select">';
            $html .= '<option value="">请选择街道</option>';
            $html .= '</select>';
        }
        return $html;
    }

    public function getSearchInsCompany()
    {
        $keyword = \YunShop::request()->keyword;
        $company = InsuranceCompany::select('id', 'name')
            ->where('name', 'like', '%' . $keyword . '%')
            ->where('is_show', 1)
            ->get();

        return view('Yunshop\Supplier::admin.insurance.company_query', [
            'company' => $company,
        ])->render();
    }

    public function createInsCode()
    {
        $ids = request()->ids;
        $ids = implode(',', $ids);

        $supplier_id = Session::get('supplier')['id'];

        $url = request()->getSchemeAndHttpHost() . '/addons/yun_shop/?menu#/member/policyPay/' . $ids . '/' . $supplier_id . '?i=' . \YunShop::app()->uniacid;
        $code = new \app\common\helpers\QrCodeHelper($url, 'app/public/insurance');
        $qr_code = $code->url();

        return $this->successJson('ok', $qr_code);
    }

    public function pdfList()
    {
        $supplier_id = Session::get('supplier')['id'];
        $list = InsurancePdf::where('supplier_id', $supplier_id)->orderBy('created_at', 'desc')->paginate(20)->toArray();

        foreach ($list['data'] as &$pdf) {
            if (!empty($pdf['pdf'])) {
                $pdf['pdf'] = json_decode($pdf['pdf']);
                foreach ($pdf['pdf'] as $file_name) {
                    $pdf['file_name'][] = substr($file_name, strpos($file_name, 'insurance/')+10);
                }
            }
        }

        return $this->successJson('ok', [
            'list' => $list,
        ]);
    }
}