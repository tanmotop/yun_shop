<?php

/**
 * Created by PhpStorm.
 * Author: 芸众商城 www.yunzshop.com
 * Date: 2018/5/11
 * Time: 上午10:16
 */

namespace Yunshop\Supplier\supplier\controllers\order;

use app\common\exceptions\ShopException;
use app\common\helpers\PaginationHelper;
use app\common\services\ExportService;
use app\common\services\Session;
use Yunshop\Supplier\common\controllers\SupplierCommonController;
use Yunshop\Supplier\common\services\SupplierExportService;
use Yunshop\Supplier\supplier\models\SupplierOrderJoinOrder;
use Yunshop\Supplier\supplier\models\SupplierWithdraw;

class SupplierOrderController extends SupplierCommonController
{
    const PAGE_SIZE = 10;
    public $orderModel;


    public function preAction()
    {
        parent::preAction(); // TODO: Change the autogenerated stub
        $params = \YunShop::request()->get('search');
        if (!Session::get('supplier')['id']) {
            throw new ShopException('供应商身份验证失败');
        }
        $params['supplier_id'] = Session::get('supplier')['id'];
        if ($params) {
            $params = array_filter($params, function ($item) {
                return !empty($item);
            });
        }
        $this->orderModel = SupplierOrderJoinOrder::getSupplierOrderList($params);
    }

    public function index()
    {
        $listModel = $this->orderModel;
        self::export($this->orderModel);
        return view('Yunshop\Supplier::supplier.order.supplier_list', self::getData($listModel, 'index'))->render();
    }

    /**
     * @name 等待付款
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function waitPay()
    {
        $listModel = $this->orderModel->status(0);
        self::export($this->orderModel->status(0));
        return view('Yunshop\Supplier::supplier.order.supplier_list', self::getData($listModel, 'wait-pay'))->render();
    }

    /**
     * @name 等待发货
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function waitSend()
    {
        $listModel = $this->orderModel->status(1);
        self::export($this->orderModel->status(1));
        return view('Yunshop\Supplier::supplier.order.supplier_list', self::getData($listModel, 'wait-send'))->render();
    }

    /**
     * @name 等待收货
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function waitReceive()
    {
        $listModel = $this->orderModel->status(2);
        self::export($this->orderModel->status(2));
        return view('Yunshop\Supplier::supplier.order.supplier_list', self::getData($listModel, 'wait-receive'))->render();
    }

    /**
     * @name 完成订单
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function completed()
    {
        $listModel = $this->orderModel->status(3);
        self::export($this->orderModel->status(3));
        return view('Yunshop\Supplier::supplier.order.supplier_list', self::getData($listModel, 'completed'))->render();
    }

    /**
     * @name 关闭订单
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function cancelled()
    {
        $listModel = $this->orderModel->status(-1);
        self::export($this->orderModel->status(-1));
        return view('Yunshop\Supplier::supplier.order.supplier_list', self::getData($listModel, 'cancelled'))->render();
    }

    /**
     * @name 退换货订单
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function refund()
    {
        $listModel = $this->orderModel
            ->whereHas('hasOneRefundApply', function ($query) {
                return $query->refunding();
            });
        self::export($this->orderModel->whereHas('hasOneRefundApply', function ($query) {
            return $query->refunding();
        }));
        return view('Yunshop\Supplier::supplier.order.supplier_list', self::getData($listModel, 'refund'))->render();
    }

    public function refunded()
    {
        $listModel = $this->orderModel->refunded();
        self::export($this->orderModel->refunded());
        return view('Yunshop\Supplier::supplier.order.supplier_list', self::getData($listModel, 'refunded'))->render();
    }

    private function getData($listModel, $route)
    {

        if (app('plugins')->isEnabled('fdd_contract')) {
            dd(1);
            $contract_setting = \Setting::get('plugin.fdd_contract');
            if ($contract_setting['switch']) {
                $contract = \Yunshop\FddContract\models\Contract::getDefaultForType(2);
            }
        }

        $oder = $listModel->sum('price');//获取总金额
        $list = $listModel->orderBy('yz_order.id', 'desc')->paginate(self::PAGE_SIZE)->toArray();//生成列表
        $list['total_price'] = $oder;//获取总金额
        $params = \YunShop::request()->get('search');//获取搜索内容
        $costmoney = SupplierWithdraw::getSureOrderInformation(Session::get('supplier')['id'], 'profit');//可提现金额
        $shop_set = \Setting::get('shop.pay');
        $set = \Setting::get('plugin.supplier');
        $params['plugin'] = 'fund';
        $pager = PaginationHelper::show($list['total'], $list['current_page'], $list['per_page']);//分页
        return [
            'list' => $list,
            'pager' => $pager,
            'requestSearch' => $params,
            'var' => \YunShop::app()->get(),
            'total_price' => $list['total_price'],
            'url' => 'plugin.supplier.supplier.controllers.order.supplier-order.' . $route,
            'include_ops' => 'Yunshop\Supplier::supplier.order.ops',
            'detail_url' => 'plugin.supplier.supplier.controllers.order.order-detail.index',
            'plugin_class' => app('plugins'),
            'yz_url' => 'yzWebUrl',
            'costmoney' => $costmoney,
            'shop_set' => $shop_set,
            'include_modals' => 'Yunshop\Supplier::supplier.order.modals',
            'withdraw_url' => 'plugin.supplier.supplier.controllers.withdraw.supplier-withdraw.apply',
            'supplier_id' => Session::get('supplier')['id'],
            'set' => $set,
            'contract' => isset($contract)?$contract:null,
        ];
    }

    public function export1($builder)
    {
        if (\YunShop::request()->export == 1) {
            $builder = $builder->with(['discounts', 'deductions'])->orderBy('yz_order.id', 'desc');
            $list = $builder->get();
            if ($list) {
                $list = $list->toArray();
                $export_class = new SupplierExportService();
                $export_class->setColumns();
                $export_class->export($list);
            }
        }
    }

    public function export($builder)
    {
        if (request()->export == 1) {
            $builder = $builder->with(['discounts', 'deductions'])->orderBy('yz_order.id', 'desc');
            $file_name = date('Ymdhis', time()) . '供应商订单';

            $export_page = request()->export_page ? request()->export_page : 1;
            $export_model = new ExportService($builder, $export_page);

            $export_data[0] = ['订单编号', '支付单号','粉丝ID', '粉丝昵称', '会员姓名', '联系电话', '收货地址', '商品名称', '商品编码', '商品数量',
                '支付方式', '商品小计', '运费', '应收款', '订单成本', '状态', '下单时间', '付款时间', '发货时间', '完成时间', '快递公司',
                '快递单号', '订单备注', '用户备注'];

            if ($export_model->builder_model->isEmpty()) {
                throw new ShopException('导出数据为空');
            }

            foreach ($export_model->builder_model as $key => $item) {
                $address = explode(' ', $item->address->address);
                $item->province = !empty($address[0])?$address[0]:'';
                $item->city = !empty($address[1])?$address[1]:'';
                $item->district = !empty($address[2])?$address[2]:'';
                $export_data[$key + 1] = [
                    $item->order_sn,
                    $item->hasOneOrderPay->pay_sn,
                    $item->belongsToMember->uid,
                    $item->belongsToMember->nickname,
                    $item->address->realname,
                    $item->address->mobile,
                    $item->address->address,
                    $this->getGoods($item, 'goods_title'),
                    $this->getGoods($item, 'goods_sn'),
                    $this->getGoods($item, 'total'),
                    $item->pay_type_name,
                    $item->goods_price,
                    $item->dispatch_price,
                    $item->price,
                    $item->supplier_profit,
                    $item->status_name,
                    $item->create_time = strtotime($item->create_time)==0?'':$item->create_time->toDateTimeString(),
                    $item->pay_time = strtotime($item->pay_time)==0?'':$item->pay_time->toDateTimeString(),
                    $item->send_time = strtotime($item->send_time)==0 ? '':$item->send_time->toDateTimeString(),
                    $item->finish_time = strtotime($item->finish_time)==0 ? '':$item->finish_time->toDateTimeString(),
                    $item->express->express_company_name,
                    $item->express->express_sn,
                    $item->hasOneOrderRemark->remark,
                    $item->note,

                ];
            }
            $export_model->export($file_name, $export_data, \Request::query('route'));
        }
    }

    protected function getGoods($order, $key)
    {
        $goods_title = '';
        $goods_sn = '';
        $total = '';
        foreach ($order->hasManyOrderGoods as $goods) {
            $row_goods_title = $goods->title;
            if ($goods->goods_option_title) {
                $row_goods_title .= '['. $goods->goods_option_title .']';
            }

            $goods_title .= '【' . $row_goods_title . '*' . $goods->total . '】';
            $goods_sn .= $goods->goods_sn.'/';
            $total .= $goods->total.'/';
        }
        return $$key;
    }

    protected function getExportDiscount($order, $key)
    {
        $export_discount = [
            'deduction' => 0,    //抵扣金额
            'coupon'    => 0,    //优惠券优惠
            'enoughReduce' => 0,  //全场满减优惠
            'singleEnoughReduce' => 0,    //单品满减优惠
        ];

        foreach ($order['discounts'] as $discount) {

            if ($discount['discount_code'] == $key) {
                $export_discount[$key] = $discount['amount'];
            }
        }

        if (!$export_discount['deduction']) {

            foreach ($order['deductions'] as $k => $v) {

                $export_discount['deduction'] += $v['amount'];
            }
        }

        return $export_discount[$key];
    }
}